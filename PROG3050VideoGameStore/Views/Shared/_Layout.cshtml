<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - PROG3050VideoGameStore</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/PROG3050VideoGameStore.styles.css" asp-append-version="true" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm border-bottom box-shadow">
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                    aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="navbar navbar-collapse collapse">
                <ul class="navbar-nav flex-grow-4">

                    <li>
                        <div class="navbar-brand ">Conestoga Video Game Store</div>
                    </li>

                    @{
                        bool isHomePage = Context.Request.Path.Equals("/", StringComparison.OrdinalIgnoreCase);
                        bool isProfilePage = Context.Request.Path.StartsWithSegments("/profile/Profile", StringComparison.OrdinalIgnoreCase);
                        bool isLoginPage = Context.Request.Path.Equals("/LoginRegister/Login", StringComparison.OrdinalIgnoreCase);
                        bool isRegisterPage = Context.Request.Path.Equals("/LoginRegister/Register", StringComparison.OrdinalIgnoreCase);
                        bool isProfileIndex = Context.Request.Path.StartsWithSegments("/LoginRegister/ProfileIndex", StringComparison.OrdinalIgnoreCase);
                        bool isAddAddressPage = Context.Request.Path.StartsWithSegments("/LoginRegister/AddAddress", StringComparison.OrdinalIgnoreCase);
                        bool isAddPreferencePage = Context.Request.Path.StartsWithSegments("/LoginRegister/AddPreference", StringComparison.OrdinalIgnoreCase);
                        bool isPreferencesListPage = Context.Request.Path.StartsWithSegments("/LoginRegister/PreferencesList", StringComparison.OrdinalIgnoreCase);
                        bool isDeletePreferencePage = Context.Request.Path.StartsWithSegments("/LoginRegister/DeletePreference", StringComparison.OrdinalIgnoreCase);
                        bool isChoosePreferencePage = Context.Request.Path.StartsWithSegments("/LoginRegister/ChoosePreference", StringComparison.OrdinalIgnoreCase);
                        bool isUpdateProfilePage = Context.Request.Path.StartsWithSegments("/LoginRegister/UpdateProfile", StringComparison.OrdinalIgnoreCase);
                        bool isUpdatePreferencePage = Context.Request.Path.StartsWithSegments("/LoginRegister/UpdatePreferences", StringComparison.OrdinalIgnoreCase);
                        bool isEmailResetPasswordPage = Context.Request.Path.StartsWithSegments("/LoginRegister/EmailResetPassword", StringComparison.OrdinalIgnoreCase);
                        bool isWishListPage = Context.Request.Path.StartsWithSegments("/Profile/WishList", StringComparison.OrdinalIgnoreCase);
                        bool isPanelPage = Context.Request.Path.StartsWithSegments("/Admin/Panel", StringComparison.OrdinalIgnoreCase);
                        bool isGameAddPage = Context.Request.Path.StartsWithSegments("/Admin/AddGame", StringComparison.OrdinalIgnoreCase);
                        bool isEventAddPage = Context.Request.Path.StartsWithSegments("/Admin/AddEvent", StringComparison.OrdinalIgnoreCase);
                        bool isListPage = Context.Request.Path.StartsWithSegments("/Admin/List", StringComparison.OrdinalIgnoreCase);
                        bool isGameEditPage = Context.Request.Path.StartsWithSegments("/Admin/EditGame", StringComparison.OrdinalIgnoreCase);
                        bool isEventEditPage = Context.Request.Path.StartsWithSegments("/Admin/EditEvent", StringComparison.OrdinalIgnoreCase);
                        bool isChangePasswordPage = Context.Request.Path.StartsWithSegments("/LoginRegister/ChangePassword", StringComparison.OrdinalIgnoreCase);
                        bool isAddressListPage = Context.Request.Path.StartsWithSegments("/LoginRegister/ListAddresses", StringComparison.OrdinalIgnoreCase);
                        bool isAddressEditPage = Context.Request.Path.StartsWithSegments("/LoginRegister/Address", StringComparison.OrdinalIgnoreCase);
                        bool isRatingEditPage = Context.Request.Path.StartsWithSegments("/Games/AddRatings", StringComparison.OrdinalIgnoreCase);
                        bool isReviewEditPage = Context.Request.Path.StartsWithSegments("/Games/AddReview", StringComparison.OrdinalIgnoreCase);
                        bool isProfileGameListPage = Context.Request.Path.StartsWithSegments("/Games/Index", StringComparison.OrdinalIgnoreCase);
                        bool isAddToWishListPage = Context.Request.Path.StartsWithSegments("/Games/AddGameToWishList", StringComparison.OrdinalIgnoreCase);
                        bool isViewReviewPage = Context.Request.Path.StartsWithSegments("/Games/GameReviews", StringComparison.OrdinalIgnoreCase);
                        bool isReviewApprovalPage = Context.Request.Path.StartsWithSegments("/Admin/ReviewApprovalList", StringComparison.OrdinalIgnoreCase);
                        bool isReviewApprovePage = Context.Request.Path.StartsWithSegments("/Admin/ApproveReview", StringComparison.OrdinalIgnoreCase);
                        bool isReviewRejectPage = Context.Request.Path.StartsWithSegments("/Admin/RejectReview", StringComparison.OrdinalIgnoreCase);
                        bool isEventRegisterPage = Context.Request.Path.StartsWithSegments("/Games/EventRegister", StringComparison.OrdinalIgnoreCase);
                        bool isEveRegisterPage = Context.Request.Path.StartsWithSegments("/Games/Register", StringComparison.OrdinalIgnoreCase);
                        bool isUnregisterPage = Context.Request.Path.StartsWithSegments("/Games/Unregister", StringComparison.OrdinalIgnoreCase);
                        bool isGamesDetailsPage = Context.Request.Path.StartsWithSegments("/Games/Details", StringComparison.OrdinalIgnoreCase);
                        bool isEventListPage = Context.Request.Path.StartsWithSegments("/Admin/EventList", StringComparison.OrdinalIgnoreCase);
                        bool isAddFriendFormPage = Context.Request.Path.StartsWithSegments("/FriendsAndFamily/AddFriendForm", StringComparison.OrdinalIgnoreCase);
                        bool isFriendRequestsPage = Context.Request.Path.StartsWithSegments("/FriendsAndFamily/FriendRequests", StringComparison.OrdinalIgnoreCase);
                        bool isFriendsAndFamilyPage = Context.Request.Path.StartsWithSegments("/FriendsAndFamily/FriendsAndFamily", StringComparison.OrdinalIgnoreCase);
                        bool isWishList = Context.Request.Path.StartsWithSegments("/WishList/WishList", StringComparison.OrdinalIgnoreCase);
                        bool isDetailsForFriendsWishList = Context.Request.Path.StartsWithSegments("/Games/DetailsForFriendsWishList", StringComparison.OrdinalIgnoreCase);
                        bool isWishListForFriends = Context.Request.Path.StartsWithSegments("/WishList/WishListForFriends", StringComparison.OrdinalIgnoreCase);
                        bool isDetailsForWishList = Context.Request.Path.StartsWithSegments("/Games/DetailsForWishList", StringComparison.OrdinalIgnoreCase);
                        bool isReportsPage = Context.Request.Path.StartsWithSegments("/Reports/ReportsPage", StringComparison.OrdinalIgnoreCase);
                        bool isAddToCart = Context.Request.Path.StartsWithSegments("/Cart/AddGameToCart", StringComparison.OrdinalIgnoreCase);
                        bool isCartPage = Context.Request.Path.StartsWithSegments("/Cart/CartPage", StringComparison.OrdinalIgnoreCase);
                    }
                     @if (isReportsPage)
                    {
                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("Panel", "Admin", new { id = Model.ProfileId})">Back</a>
                        </li>
                    }

                     @if (isWishListForFriends)
                    {
                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("FriendsAndFamily", "FriendsAndFamily", new { id = Model.ProfileId})">Back</a>
                        </li>
                    }
                    @if (isDetailsForFriendsWishList)
                    {
                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("WishListForFriends", "WishList", new { profileId = Model.FriendId, currentProfileId=Model.ProfileId})">Back</a>
                        </li>
                    }

                     @if (isDetailsForWishList)
                    {
                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("WishList", "WishList", new { profileId = Model.ProfileId})">Back</a>
                        </li>
                    }

                     @if (isWishList)
                    {
                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("ProfileIndex", "LoginRegister", new { id = Model.ProfileId})">Back</a>
                        </li>
                    }

                     @if (isAddFriendFormPage)
                    {
                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("ProfileIndex", "LoginRegister", new { id = Model.ProfileId})">Back</a>
                        </li>
                    }

                     @if (isFriendRequestsPage)
                    {
                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("ProfileIndex", "LoginRegister", new { id = Model.ProfileId})">Back</a>
                        </li>
                    }

                     @if (isFriendsAndFamilyPage)
                    {
                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("ProfileIndex", "LoginRegister", new { id = Model.ProfileId})">Back</a>
                        </li>
                    }

                    
                    @if (isWishListPage || isAddToCart || isCartPage)
                    {
                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("ProfileIndex", "LoginRegister", new { id = Model.ProfileId})">Back</a>
                        </li>
                    }

                    @if (isEventListPage)
                    {
                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("Panel", "Admin", new { id = Model.ProfileId})">Back</a>
                        </li>
                    }


                    @if (isEventEditPage == true)
                    {
                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("EventList", "Admin", new { id = Model.ProfileId})">Back</a>
                        </li>
                    }

                    @if (isDeletePreferencePage == true)
                    {

                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("ProfileIndex", "LoginRegister", new { id = Model.ProfileId})">Back</a>
                        </li>
                    }

                    @if (isChoosePreferencePage == true)
                    {

                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("ProfileIndex", "LoginRegister", new { id = Model.ProfileId})">Back</a>
                        </li>
                    }

                    @if (isAddPreferencePage == true)
                    {

                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("ProfileIndex", "LoginRegister", new { id = Model.ProfileId})">Back</a>
                        </li>
                    }

                    @if (isPreferencesListPage == true)
                    {

                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("ProfileIndex", "LoginRegister", new { id = Model.ProfileId})">Back</a>
                        </li>
                    }



                    @if (isGamesDetailsPage == true)
                    {

                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("Index", "Games", new { id = Model.ProfileId})">Back</a>
                        </li>
                    }

                    @if (isEveRegisterPage == true)
                    {

                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("ProfileIndex", "LoginRegister", new { id = Model.ProfileId})">Back</a>
                        </li>
                    }
                    @if (isUnregisterPage == true)
                    {

                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("ProfileIndex", "LoginRegister", new { id = Model.ProfileId})">Back</a>
                        </li>
                    }
                    @if (isEventRegisterPage == true)
                    {

                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("ProfileIndex", "LoginRegister", new { id = Model.ProfileId})">Back</a>
                        </li>
                    }

                    @if (isReviewApprovePage == true)
                    {

                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("Panel", "Admin", new { id = Model.ProfileId})">Back</a>
                        </li>
                    }
                    @if (isReviewRejectPage == true)
                    {

                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("Panel", "Admin", new { id = Model.ProfileId})">Back</a>
                        </li>
                    }

                    @if (isReviewApprovalPage == true)
                    {

                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("Panel", "Admin", new { id = Model.ProfileId})">Back</a>
                        </li>
                    }

                    @if (isViewReviewPage == true)
                    {

                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("Index", "Games", new { id = Model.ProfileId})">Back</a>
                        </li>
                    }

                    @if (isRatingEditPage == true)
                    {

                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("Index", "Games", new { id = Model.ProfileId})">Back</a>
                        </li>
                    }

                    
                    @if (isReviewEditPage == true)
                    {

                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("Index", "Games", new { id = Model.ProfileId})">Back</a>
                        </li>
                    }

                    @if (isProfileGameListPage == true)
                    {

                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("ProfileIndex", "LoginRegister", new { id = Model.ProfileId})">Back</a>
                        </li>
                    }

                    @if (isAddToWishListPage == true)
                    {

                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("ProfileIndex", "LoginRegister", new { id = Model.ProfileId})">Back</a>
                        </li>
                    }


                    @if (isAddressEditPage)
                    {
                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("ListAddresses", "LoginRegister", new { id = Model.UserProfileId})">Back</a>
                        </li>
                    }

                    @if (isAddressListPage)
                    {
                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("ProfileIndex", "LoginRegister", new { id = Model.ProfileId})">Back</a>
                        </li>
                    }



                    @if (isChangePasswordPage)
                    {
                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("ProfileIndex", "LoginRegister", new { id = Model.CurrentProfileId})">Back</a>
                        </li>
                    }

                    @if (isGameEditPage)
                    {
                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("List", "Admin", new { id = Model.ProfileId})">Back</a>
                        </li>
                    }


                    @if (isListPage)
                    {
                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("Panel", "Admin", new { id = Model.ProfileId})">Back</a>
                        </li>
                    }

                    @if (isEventAddPage)
                    {
                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("Panel", "Admin", new { id = Model.ProfileId})">Back</a>
                        </li>
                    }

                    @if (isGameAddPage)
                    {
                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("Panel", "Admin", new { id = Model.ProfileId})">Back</a>
                        </li>
                    }

                    @if (isPanelPage)
                    {
                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("ProfileIndex", "LoginRegister", new { id = Model.ProfileId})">Back</a>
                        </li>
                    }

                    @if (isEmailResetPasswordPage)
                    {
                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("Login", "LoginRegister")">Back</a>
                        </li>
                    }

                    @if (isUpdatePreferencePage)
                    {
                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("PreferencesList", "LoginRegister", new { id = Model.UserProfileId})">Back</a>
                        </li>
                    }

                    @if (isAddAddressPage)
                    {
                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("ProfileIndex", "LoginRegister", new { id = Model.ProfileId})">Back</a>
                        </li>
                    }

                    @if (isUpdateProfilePage)
                    {
                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("ProfileIndex", "LoginRegister", new { id = Model.Id})">Back</a>
                        </li>
                    }

                    @if (isProfileIndex)
                    {

                        if (Model.IsEmployee == true)
                        {
                            <li class="nav-item">
                                <a class="nav-link text-light" href="@Url.Action("Panel", "Admin", new { id = Model.Id })">Admin</a>
                            </li>

                        }

                         <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("CartPage", "Cart", new { id = Model.Id })">Cart</a>
                        </li>

                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("AddPreference", "LoginRegister", new { id = Model.Id })">Add Preference</a>
                        </li>

                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("PreferencesList", "LoginRegister", new { id = Model.Id })">Preferences List</a>
                        </li>


                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("AddAddress", "LoginRegister", new { id = Model.Id })">Add Address</a>
                        </li>

                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("ListAddresses", "LoginRegister", new { id = Model.Id })">Address List</a>
                        </li>

                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("UpdateProfile", "LoginRegister", new { id = Model.Id })">Update Profile</a>
                        </li>

                        <li class="nav-item">
                            <a class="nav-link text-light" href="@Url.Action("ChangePassword", "LoginRegister", new { id = Model.Id })">Change Password</a>
                        </li>

                        <li>
                            <a class="nav-link text-light" href="@Url.Action("WishList", "Wishlist", new { profileId = Model.Id })">Wishlist</a>
                        </li>

                        <li>
                            <a class="nav-link text-light" href="@Url.Action("FriendsAndFamily", "FriendsAndFamily", new { id = Model.Id })">Friends</a>
                        </li>

                        <li class="nav-item dropdown" style="margin-bottom: 1rem;">
                            <a class="nav-link dropdown-toggle bg-dark" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                @Model.DisplayName
                            </a>
                            <div class="dropdown-menu bg-dark" aria-labelledby="navbarDropdown">
                                <a class="nav-link text-light" href="@Url.Action("AddFriendForm", "FriendsAndFamily", new { id = Model.Id })">Add Friends & Family</a>

                                <a class="nav-link text-light" href="@Url.Action("FriendRequests", "FriendsAndFamily", new { id = Model.Id })">Friend Requests</a>


                                <a class="nav-link text-light" href="@Url.Action("Profile", "profile", new { id = Model.Id })">Profile</a>

                                <a class="nav-link text-light" href="@Url.Action("SignOut", "Home", new{id = Model.Id})">Sign Out</a>
                            </div>
                           
                              
                         
                        </li>
                    }


                    @if (isHomePage)
                    {

                        <li class="nav-item">
                            <a class="nav-link text-light" asp-area="" asp-controller="LoginRegister" asp-action="Login">Login</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-light" asp-area="" asp-controller="LoginRegister" asp-action="Register">Register</a>
                        </li>
                    }

                    @if (isProfilePage)
                    {
                        <li class="nav-item">
                            @*I'm not sure how to fix it but this back button should return the user to the profileIndex page'*@
                            <a class="nav-link text-light" href="@Url.Action("ProfileIndex", "LoginRegister")">Back</a>
                        </li>


                        <li>
                            <a class="nav-link text-light" asp-area="" asp-controller="Home" asp-action="index">Logout</a>
                        </li>
                    }

                    @if (isLoginPage || isRegisterPage)
                    {
                        <li class="nav-item">
                            <a class="nav-link text-light" asp-area="" asp-controller="Home" asp-action="index">Back</a>
                        </li>
                    }
                </ul>
            </div>
        </nav>
    </header>
    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted" >
        <div class="container">
            &copy; 2023 - PROG3050VideoGameStore - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
        </div>
    </footer>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
